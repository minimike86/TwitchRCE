name: CI/CD Workflow

on: [push, pull_request]

env:
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  VIRUS_TOTAL_API_KEY: ${{ secrets.VIRUS_TOTAL_API_KEY }}
  BOT_USER_ID: ${{ vars.BOT_USER_ID }}
  BOT_JOIN_CHANNEL: ${{ vars.BOT_JOIN_CHANNEL }}
  BOT_JOIN_CHANNEL_ID: ${{ vars.BOT_JOIN_CHANNEL_ID }}
  MAX_VIP_SLOTS: ${{ vars.MAX_VIP_SLOTS }}

jobs:
  setup:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install poetry
        run: |
          python -m pip install poetry

      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true

#      - name: Cache the virtualenv
#        uses: actions/cache@v2
#        with:
#          path: .venv
#          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: |
          poetry install --with dev

      - name: Run isort
        id: isort
        uses: isort/isort-action@master
        with:
          configuration: "--check-only --diff"
          sortPaths: "."

#      - name: Output isort summary
#        run: |
#          echo ${{steps.isort.outputs.isort-result}} >> $GITHUB_STEP_SUMMARY

      - name: Run black
        uses: psf/black@stable
        with:
          options: "--check --diff --verbose --color"
          src: "."
          summary: true

  tests:
    name: Test
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install poetry
        run: |
          python -m pip install poetry

      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: |
          poetry install --with dev

      - name: Run tests
        run: |
          poetry run pytest --tb=short | tee pytest_output.txt

      - name: Display test results in summary
        if: always()
        run: |
          echo "### 🎉 Test Summary Report 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Test |" >> $GITHUB_STEP_SUMMARY
          echo "| ------ | ---- |" >> $GITHUB_STEP_SUMMARY

          # Iterate through pytest output to generate a summary
          while IFS= read -r line; do
            if [[ $line == *"PASSED"* ]]; then
              echo "| ✅ | $line |" >> $GITHUB_STEP_SUMMARY
            elif [[ $line == *"FAILED"* ]]; then
              echo "| ❌ | $line |" >> $GITHUB_STEP_SUMMARY
            fi
          done < pytest_output.txt

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📜 Detailed Output 📜" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat pytest_output.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
